// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DatabaseCompiledModels.MyCompiledModels
{
    public partial class CompiledModelsIssueContextModel
    {
        partial void Initialize()
        {
            var testV = TestVEntityType.Create(this);
            var testValue = TestValueEntityType.Create(this);

            TestVEntityType.CreateForeignKey1(testV, testValue);

            TestVEntityType.CreateAnnotations(testV);
            TestValueEntityType.CreateAnnotations(testValue);

            AddAnnotation("ProductVersion", "8.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var testV = FindEntityType("DatabaseCompiledModels.Models.TestV")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            testV.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var databaseCompiledModelsModelsTestVTableBase = new TableBase("DatabaseCompiledModels.Models.TestV", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", databaseCompiledModelsModelsTestVTableBase);
            databaseCompiledModelsModelsTestVTableBase.Columns.Add("Id", idColumnBase);
            var testValueIdColumnBase = new ColumnBase<ColumnMappingBase>("TestValueId", "int", databaseCompiledModelsModelsTestVTableBase);
            databaseCompiledModelsModelsTestVTableBase.Columns.Add("TestValueId", testValueIdColumnBase);
            var testValuesColumnBase = new ColumnBase<ColumnMappingBase>("TestValues", "char(10)", databaseCompiledModelsModelsTestVTableBase);
            databaseCompiledModelsModelsTestVTableBase.Columns.Add("TestValues", testValuesColumnBase);
            relationalModel.DefaultTables.Add("DatabaseCompiledModels.Models.TestV", databaseCompiledModelsModelsTestVTableBase);
            var databaseCompiledModelsModelsTestVMappingBase = new TableMappingBase<ColumnMappingBase>(testV, databaseCompiledModelsModelsTestVTableBase, true);
            databaseCompiledModelsModelsTestVTableBase.AddTypeMapping(databaseCompiledModelsModelsTestVMappingBase, false);
            defaultTableMappings.Add(databaseCompiledModelsModelsTestVMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, testV.FindProperty("Id")!, databaseCompiledModelsModelsTestVMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)testValueIdColumnBase, testV.FindProperty("TestValueId")!, databaseCompiledModelsModelsTestVMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)testValuesColumnBase, testV.FindProperty("TestValues")!, databaseCompiledModelsModelsTestVMappingBase);

            var tableMappings = new List<TableMapping>();
            testV.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var testVTable = new Table("TestV", null, relationalModel);
            var idColumn = new Column("Id", "int", testVTable);
            testVTable.Columns.Add("Id", idColumn);
            var testValueIdColumn = new Column("TestValueId", "int", testVTable);
            testVTable.Columns.Add("TestValueId", testValueIdColumn);
            var testValuesColumn = new Column("TestValues", "char(10)", testVTable);
            testVTable.Columns.Add("TestValues", testValuesColumn);
            var pK_TestV = new UniqueConstraint("PK_TestV", testVTable, new[] { idColumn });
            testVTable.PrimaryKey = pK_TestV;
            var pK_TestVUc = RelationalModel.GetKey(this,
                "DatabaseCompiledModels.Models.TestV",
                new[] { "Id" });
            pK_TestV.MappedKeys.Add(pK_TestVUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TestVUc).Add(pK_TestV);
            testVTable.UniqueConstraints.Add("PK_TestV", pK_TestV);
            var iX_TestV_TestValueId = new TableIndex(
            "IX_TestV_TestValueId", testVTable, new[] { testValueIdColumn }, false);
            var iX_TestV_TestValueIdIx = RelationalModel.GetIndex(this,
                "DatabaseCompiledModels.Models.TestV",
                new[] { "TestValueId" });
            iX_TestV_TestValueId.MappedIndexes.Add(iX_TestV_TestValueIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_TestV_TestValueIdIx).Add(iX_TestV_TestValueId);
            testVTable.Indexes.Add("IX_TestV_TestValueId", iX_TestV_TestValueId);
            relationalModel.Tables.Add(("TestV", null), testVTable);
            var testVTableMapping = new TableMapping(testV, testVTable, true);
            testVTable.AddTypeMapping(testVTableMapping, false);
            tableMappings.Add(testVTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, testV.FindProperty("Id")!, testVTableMapping);
            RelationalModel.CreateColumnMapping(testValueIdColumn, testV.FindProperty("TestValueId")!, testVTableMapping);
            RelationalModel.CreateColumnMapping(testValuesColumn, testV.FindProperty("TestValues")!, testVTableMapping);

            var testValue = FindEntityType("DatabaseCompiledModels.Models.TestValue")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            testValue.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var databaseCompiledModelsModelsTestValueTableBase = new TableBase("DatabaseCompiledModels.Models.TestValue", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", databaseCompiledModelsModelsTestValueTableBase);
            databaseCompiledModelsModelsTestValueTableBase.Columns.Add("Id", idColumnBase0);
            var testValueColumnBase = new ColumnBase<ColumnMappingBase>("TestValue", "char(30)", databaseCompiledModelsModelsTestValueTableBase);
            databaseCompiledModelsModelsTestValueTableBase.Columns.Add("TestValue", testValueColumnBase);
            relationalModel.DefaultTables.Add("DatabaseCompiledModels.Models.TestValue", databaseCompiledModelsModelsTestValueTableBase);
            var databaseCompiledModelsModelsTestValueMappingBase = new TableMappingBase<ColumnMappingBase>(testValue, databaseCompiledModelsModelsTestValueTableBase, true);
            databaseCompiledModelsModelsTestValueTableBase.AddTypeMapping(databaseCompiledModelsModelsTestValueMappingBase, false);
            defaultTableMappings0.Add(databaseCompiledModelsModelsTestValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, testValue.FindProperty("Id")!, databaseCompiledModelsModelsTestValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)testValueColumnBase, testValue.FindProperty("TestValue1")!, databaseCompiledModelsModelsTestValueMappingBase);

            var tableMappings0 = new List<TableMapping>();
            testValue.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var testValuesTable = new Table("TestValues", null, relationalModel);
            var idColumn0 = new Column("Id", "int", testValuesTable);
            testValuesTable.Columns.Add("Id", idColumn0);
            var testValueColumn = new Column("TestValue", "char(30)", testValuesTable);
            testValuesTable.Columns.Add("TestValue", testValueColumn);
            var pK_TestValues = new UniqueConstraint("PK_TestValues", testValuesTable, new[] { idColumn0 });
            testValuesTable.PrimaryKey = pK_TestValues;
            var pK_TestValuesUc = RelationalModel.GetKey(this,
                "DatabaseCompiledModels.Models.TestValue",
                new[] { "Id" });
            pK_TestValues.MappedKeys.Add(pK_TestValuesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TestValuesUc).Add(pK_TestValues);
            testValuesTable.UniqueConstraints.Add("PK_TestValues", pK_TestValues);
            relationalModel.Tables.Add(("TestValues", null), testValuesTable);
            var testValuesTableMapping = new TableMapping(testValue, testValuesTable, true);
            testValuesTable.AddTypeMapping(testValuesTableMapping, false);
            tableMappings0.Add(testValuesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, testValue.FindProperty("Id")!, testValuesTableMapping);
            RelationalModel.CreateColumnMapping(testValueColumn, testValue.FindProperty("TestValue1")!, testValuesTableMapping);
            var fK_TestV_TestValues = new ForeignKeyConstraint(
                "FK_TestV_TestValues", testVTable, testValuesTable,
                new[] { testValueIdColumn },
                testValuesTable.FindUniqueConstraint("PK_TestValues")!, ReferentialAction.NoAction);
            var fK_TestV_TestValuesFk = RelationalModel.GetForeignKey(this,
                "DatabaseCompiledModels.Models.TestV",
                new[] { "TestValueId" },
                "DatabaseCompiledModels.Models.TestValue",
                new[] { "Id" });
            fK_TestV_TestValues.MappedForeignKeys.Add(fK_TestV_TestValuesFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_TestV_TestValuesFk).Add(fK_TestV_TestValues);
            testVTable.ForeignKeyConstraints.Add(fK_TestV_TestValues);
            testValuesTable.ReferencingForeignKeyConstraints.Add(fK_TestV_TestValues);
            return relationalModel.MakeReadOnly();
        }
    }
}
